1. 简单介绍下zookeeper
Ø ZooKeeper（注：ZooKeeper是著名Hadoop的一个子项目，是一个开源的分布式协调服务，旨在解决大规模分布式应用场景下，服务协调同步（Coordinate Service）的问题；它可以为同在一个分布式系统中的其他服务提供：统一命名服务、配置管理、分布式锁服务、leader选举、集群管理等功能。
Ø ZooKeeper 是一个典型的分布式数据一致性的解决方案，致力于提供一个高性能、高可用、具有严格的顺序访问控制能力的分布式协调服务，具有如下分布式一致性特性：
顺序一致性：从同一个客户端发起的事务请求，最终将会严格地按照其发起顺序被应用到ZooKeeper中去。
原子性：要么整个集群所有机器都成功应用了某一个事务，要么都没有应用，一定不会出现集群中部分机器应用了该事务，而另外一部分没有应用的情况。
单一视图：无论客户端连接的是哪个ZooKeeper服务器，其看到的服务端数据模型都是一致的。
可靠性：一旦服务端成功地应用了一个事务，并完成对客户端的响应，那么该事务所引起的服务端状态变更将会被一直保留下来，除非有另一个事务又对其进行了变更。
实时性：ZooKeeper仅仅保证在一定的时间段内，客户端最终一定能够从服务端上读取到最新的数据状态。

Ø 由于zookeeper将全量的数据存储在内存中，并直接服务于客户端的所有非事务请求，因此它尤其适用于以读操作为主的场景。
Ø 客户端的读请求可以被集群中的任意一台机器处理，如果读请求在节点上注册了监听器，这个监听器也是由所连接的 zookeeper 机器来处理。对于写请求，这些请求会同时发给其他 zookeeper 机器并且达成一致后，请求才会返回成功。因此，随着 zookeeper 的集群机器增多，读请求的吞吐会提高但是写请求的吞吐会下降。

有序性是 zookeeper 中非常重要的一个特性，所有的更新都是全局有序的，每个更新都有一个唯一的时间戳，这个时间戳称为 zxid（Zookeeper Transaction Id）。而读请求只会相对于更新有序，也就是读请求的返回结果中会带有这个zookeeper 最新的 zxid。

2. Zookeeper 文件系统
Zookeeper 提供一个多层级的节点命名空间（节点称为 znode）。与文件系统不同的是，这些节点都可以设置关联的数据，而文件系统中只有文件节点可以存放数据而目录节点不行。
Zookeeper 为了保证高吞吐和低延迟，在内存中维护了这个树状的目录结构，这种特性使得 Zookeeper 不能用于存放大量的数据，每个节点的存放数据上限为1M。

3. 服务器角色？
Ø Leader
（1）事务请求的唯一调度和处理者，保证集群事务处理的顺序性
（2）集群内部各服务的调度者

Ø Follower
（1）处理客户端的非事务请求，转发事务请求给 Leader 服务器
（2）参与事务请求 Proposal 的投票
（3）参与 Leader 选举投票

Ø Observer
（1）3.0 版本以后引入的一个服务器角色，在不影响集群事务处理能力的基础上提升集群的非事务处理能力
（2）处理客户端的非事务请求，转发事务请求给 Leader 服务器
（3）不参与任何形式的投票

4. zookeeper的watch机制？
Ø zookeeper允许用户在指定节点上注册一些Watcher，并且在一些特定的时间触发的时候，zookeeper服务端会将事件通知到感兴趣的客户端上，该机制是zookeeper实现分布式协调服务的重要特性。
zookeeper 的 watcher 机制，可以分为四个过程：
	• 客户端注册Watcher到服务端;
	• 服务端发生数据变更;
	• 服务端通知客户端数据变更;
	• 客户端回调Watcher处理变更应对逻辑;
其中客户端注册 watcher 有三种方式，调用客户端 API 可以分别通过 getData、exists、getChildren 实现。
	
监视有两种类型：数据监视点和子节点监视点。创建、删除或者设置znode都会触发这些监视点。exists,getData 可以设置监视点。getChildren 可以设置子节点变化。
	
而可能监测的事件类型有: NodeCreated, NodeDataChanged, NodeDeleted, NodeChildrenChanged. 
	
Ø Watcher 特性：
• 一次性：watch是一次性触发器。客户端在Znode设置了Watch时，如果Znode内容发生改变，那么客户端就会获得Watch事件。例如：客户端设置getData("/znode1", true)后，如果/znode1发生改变或者删除，那么客户端就会得到一个/znode1的Watch事件，但是/znode1再次发生变化，那客户端是无法收到Watch事件的，除非客户端设置了新的Watch。这样的设计有效的减轻了服务端的压力，不然对于更新非常频繁的节点，服务端会不断的向客户端发送事件通知，无论对于网络还是服务端的压力都非常大。二是在实际应用中，很多情况下，我们的客户端不需要知道服务端的每一次变动，我只要最新的数据即可。

• 客户端串行执行：客户端 Watcher 回调的过程是一个串行同步的过程。

• 轻量：
1）Watcher 通知非常简单，只会告诉客户端发生了事件，而不会说明事件的具体内容。
2）客户端向服务端注册 Watcher 的时候，并不会把客户端真实的 Watcher 对象实体传递到服务端，仅仅是在客户端请求中使用 boolean 类型属性进行了标记。
	
• Watch事件是异步发送到Client。Zookeeper可以保证客户端发送过去的更新顺序是有序的。由于Watch有一次性触发的特点，所以在服务器端没有Watcher的情况下，Znode的任何变更就不会通知到客户端。不过，即使某个Znode设置了Watcher，且在Znode有变化的情况下通知到了客户端，但是在客户端接收到这个变化事件，但是还没有再次设置Watcher之前，如果其他客户端对该Znode做了修改，这种情况下，Znode第二次的变化客户端是无法收到通知的。这可能是由于网络延迟或者是其他因素导致，所以我们使用Zookeeper不能期望能够监控到节点每次的变化。Zookeeper只能保证最终的一致性，而无法保证强一致性。

5. Zookeeper如何扩容，扩容过程会不会有影响？
Ø 水平扩容指的是像集群添加更多的机器，以提高系统的服务容量。通过水平扩容能够帮助系统在不进行或进行极少改进工作的前提下，快速提高系统对外的服务支撑能力。

很遗憾的是，ZooKeeper 在水平扩容扩容方面做得并不十分完美，需要进行整个集群的重启。通常有两种重启方式，一种是集群整体重启，另外一种是逐台进行服务器的重启。

（1）整体重启
所谓集群整体重启，就是先将整个集群停止，然后更新 ZooKeeper 的配置，然后再次启动。如果在你的系统中，ZooKeeper 并不是个非常核心的组件，并且能够允许短暂的服务停止（通常是几秒钟的时间间隔），那么不妨选择这种方式。在整体重启的过程中，所有该集群的客户端都无法连接上集群。等到集群再次启动，这些客户端就能够自动连接上——注意，整体启动前建立起的客户端会话，并不会因为此次整体重启而失效。也就是说，在整体重启期间花费的时间将不计入会话超时时间的计算中。

（2）逐台重启
这种方式更适合绝大多数的实际场景。在这种方式中，每次仅仅重启集群中的一台机器，然后逐台对整个集群中的机器进行重启操作。这种方式可以在重启期间依然保证集群对外的正常服务。一般是先部署新机器，再重启老机器。在重启的过程中，需要保证一台机器重启完成后，再进行下一台机器的重启。

（3）reconfig动态修改配置
Zookeeper 3.5+提供了reconfig功能实现动态配置节点，官方的说明是，“你再也不需要进行全部节点重启”就可以应用所有的修改，没怎么用过，了解即可。

Ø 集群本来是单机模式，需要将它扩容成集群模式的话，短暂的停止服务是不可避免的。因为修改了配置文件，需要将原机器进行重启，而其他系统都依赖于此单机zookeeper服务。在扩容的时候，我们需要先将扩容的机器配置部署完成，在最后阶段，修改原机器上的配置文件后对服务进行重启。这个时候就会出现短暂的停止服务。
而且新机器部署的时候，会有端口异常的错误出现，这是因为单机模式下的zookeeper交换信息的端口2888和选举的端口3888都没有打开，所以会出错。这个时候不用理会，等最终原机器重启完成后，错误就会停止了。
Ø 如果本来就是集群，在集群的基础上进行扩容的话，由于整个集群中每个时刻只有一台机器不能正常工作，而集群中有过半的机器是正常工作的，那么整个集群对外就是可用的。所以这个时候不会出现错误，也不会出现停止服务，整个扩容过程对用户是无感知的。

6. 如何保证Zookeeper 集群的高可用？
三机房部署，无论哪个机房发生了故障，剩下两个机房的机器数量都超过半数。在进行 ZooKeeper 的容灾方案设计过程中，我们要充分考虑到“过半原则”。也就是说，无论发生什么情况，我们必须保证 ZooKeeper 集群中有超过半数的机器能够正常工作。

7. zk的内存模型、事务日志、快照文件？
DataTree是zookeeper内存数据存储的核心，是一个“树”的数据结构，代表了内存中一份完整的数据。DataTree的底层数据结构是concurrentHashMap,以数据节点的路径(path)为key，value则是节点的数据内容(DataNode)。
ZKDatabase是zookeeper的内存数据库，负责管理zookeeper的所有会话，DataTree存储和事务日志。ZKDatabase会定时向磁盘dump快照数据，同时在Zookeeper服务器启动的时候，会通过磁盘上的事务日志和快照数据文件恢复成一个完整的内存数据库。

针对客户端的每一次事务操作，ZooKeeper都会将它们记录到事务日志中，当然，ZooKeeper同时也会将数据变更应用到内存数据库中。另外，ZooKeePer会在进行若干次事务日志记录之后，将内存数据库的全量数据Dump到本地文件中，这个过程就是数据快照。可以使用snapCount参数来配置每次数据快照之间的事务操作次数，即ZooKeeper会在5napCount次事务日志记录后进行一个数据快照（实际上采用的是“过半随机策略”，即符合如下条件就进行数据快照：logCount>(snapCount/2+randRoll)）。

数据快照用来记录zookeeper服务器上某一个时刻全量的内存数据内容，并将其写入到指定的磁盘文件中。

8. Leader和Learner之间是如何进行交互的呢？（了解）
Ø zookeeper的客户端和服务端之间会建立TCP长连接来进行网络通信。基于该TCP连接衍生出来的会话概念，是客户端和服务端之间所有请求与响应交互的基石。leader服务器会负责管理每个会话的生命周期，包括会话的创建、心跳检测和销毁等。

Ø 在服务器启动阶段，会进行磁盘数据的恢复，完成数据恢复后就会进行Leader选举。一旦选举产生Leader服务器后，就立即开始进行集群间的数据同步，在整个过程中，zooKeeper都处于不可用状态，直到数据同步完毕（集群中绝大部分机器数据和Leader一致）,ZooKeePer才可以对外提供正常服务。在运行期间，如果Leader服务器所在的机器挂掉或是和集群中绝大部分服务器断开连接，那么就会触发新一轮的Leader选举。同样，在新的Leader服务器选举产生之前，Zo0Keeper无法对外提供服务。
Ø 一个正常运行的ZooKeeper集群，其机器角色通常由Leader、Follower和Observer组成。ZooKeeper对于客户端请求的处理，严格按照ZAB协议规范来进行。每一个服务器在启动初始化阶段都会组装一个请求处理链，Leader服务器能够处理所有类型的客户端请求；而对Follower或是Observer服务器来说，可以正常处理非事务请求，而事务请求则需要转发给Ieader服务器来处理，同时，对于每个事务请求，Leader都会为其分配一个全局唯一且递增的ZXID，以此来保证事务处理的顺序性。在事务请求的处理过程中，Leader和Follower服务器都会进行事务日志的记录。

Ø Follower和Observer统称为Learner。Leader和Learner两者之间的交互采用的是一种典型1+N的线程模型。即一个线程用来处理连接请求，然后N个线程用来处理彼此之间的io。
两个线程：LearnerCnxAcceptor、LearnerHandler；
LearnerCnxAcceptor是一个Follower接收器，专门用来接受来自Learner的连接请求。
Leader接受来自其他服务器的连接请求之后，会创建一个LearnerHandler实例，每个LearnerHandler的实例都对应着一个Learner和Leader之间的连接，主要负责两者之间的消息通信以及数据同步。总结一下，一个线程专门处理连接请求，然后有多少个连接，就创建多少个LearnerHandler线程。

9. Zk的数据是怎么同步的？
完成Leader选举之后，在正式开始工作（即接收客户端的事务请求，然后提出新的提案）之前，Leader服务器会首先确认事务日志中的所有Proposal是否都已经被集群中过半的机器提交了，即是否完成数据同步。简单地讲，数据同步过程就是Leader服务器将那些没有在Learner服务器上提交过的事务请求同步给Learner服务器。
下面我们就来看看ZAB协议的数据同步过程。
所有正常运行的服务器，要么成为Leader，要么成为FolIower并和Leader保持同步。Leader服务器需要确保所有的Follower服务器能够接收到每一条事务Proposal，并且能够正确地将所有已经提交了的事务Proposal应用到内存数据库中去。具体的，Leader服务器会为每一个FolIower服务器都准备一个队列，并将那些没有被各Follower服务器同步的事务以Proposal消息的形式逐个发送给Follower服务器，并在每一个Proposal消息后面紧接着再发送一个Commit消息，以表示该事务已经被提交。等到Follower服务器将所有其尚未同步的事务Proposal都从Leader服务器上同步过来并成功应用到本地数据库中后，Leader服务器就会将该Follower服务器加入到真正的可用Follower列表中，并开始之后的其他流程。


获取Learner状态
在注册Learner的最后阶段，Learner服务器会发送给Leader服务器一个ACKEPOCH数据包，Leader会从这个数据包中解析出该Learner的currentEpoch和lastzxid。

数据同步初始化
在开始数据同步之前，Leader服务器会进行数据同步初始化，首先会从ZooKeeper的内存数据库中提取出事务请求对应的提议缓存队列（下面我们用“提议缓存队列”来指代该队列）:proposals，同时完成对以下三个ZXID值的初始化。
.peerLastZxid：该Learner服务器最后处理的ZxID。
.minCommittedLog: Leader服务器提议缓存队列committedLog中的最小ZXID。
.maxConlmittedLog: Leader服务器提议缓存队列committedLog中的最大ZxlD。
ZooKeeper集群数据同步通常分为四类，分别是直接差异化同步（DlFF同步）、先回滚再差异化同步（TRUNC十DIFF同步）、仅回滚同步（TRUNC同步）和全量同步（SNAP同步）。在初始化阶段，Leader服务器会优先初始化以全量同步方式来同步数据。然后会根据Leader和Leamer服务器之间的数据差异情况来决定最终的数据同步方式。

Ø 直接差异化同步（DIFF同步）
场景：peerLastZxid介于minCommittedLog和maxcommittedLog之间。
对于这种场景，就使用直接差异化同步（DIFF同步）方式即可。Leader服务器会首先向这个Learner发送一个DIFF指令，用于通知Learner“进入差异化数据同步阶段，Leader服务器即将把一些Proposal同步给自己”。在实际Proposal同步过程中，针对每个Proposal,Leader服务器都会通过发送两个数据包来完成，分别是PROPOSAL内容数据包和COMMIT指令数据包--这和ZooKeeper运行时Leader和Follower之间的事务请求的提交过程是一致的。Leader服务器在发送完差异数据之后，就会将该Learner加入到forwardingFollowers或observingLearners队列中，这两个队列在ZooKeeper运行期间的事务请求处理过程中都会使用到。随后Leader还会立即发送一个NEWLEADER指令，用于通知Learner，已经将提议缓存队列中的Proposal都同步给自己了。

Learner会依次将接收的PROPOSAL和COMMIT数据包应用到内存数据库中。紧接着，Learner在接收到来自Leader的NEWLEADER指令后，会反馈给Leader一个ACK消息，表明自己也确实完成了对提议缓存队列中Proposal的同步。Leader在接收到来自Learner的这个ACK消息以后，就认为当前Learner已经完成了数据同步，同时进入“过半策略”等待阶段―Leader会和其他Learner服务器进行上述同样的数据同步流程，直到集群中有过半的Learner机器响应了Leader这个ACK消息。一旦满足“过半策略”后，Leader服务器就会向所有已经完成数据同步的Learner发送一个UPTODATE指令，用来通知Learner已经完成了数据同步，同时集群中已经有过半机器完成了数据同步，集群已经具备了对外服务的能力了。Learner在接收到这个来自Leader的UPTODATE指令后，会终止数据同步流程，然后向Leader再次反馈一个ACK消息。


Ø 先回滚在差异化同步（TRUNC+DIFF同步）
场景：当Leader服务器发现某个Learner包含了一条自己没有的事务记录，那么就需要让该Learner进行事务回滚,回滚到Leader服务器上存在的，同时也是最接近于peerLastZxid的ZXID。

Ø 仅回滚同步（TRUNC同步）
场景：peerLastZxid大于maxCommittedLog。Leader会要求Learner回滚到ZXID值为maxCommitedLog对应的事务操作。


Ø 全量同步（SNAP同步）
场景1:peerLastZxid小于minCommittedLog。
场景2:Leader服务器上没有提议缓存队列，peerLastZxid不等于IastProccssedZxid(Leader服务器数据恢复后得到的最大ZxID）。
上述这两个场景非常类似，在这两种场景下，Lcader服务器都无法直接使用提议缓存队列和Learner进行数据同步，因此只能进行全量同步（SNAP同步）。所谓全量同步就是Leader服务器将本机上的全量内存数据都同步给Learner。Leader服务器首先向Learner发送一个SNAP指令，通知Learner即将进行全量数据同步。随后，
Leader会从内存数据库中获取到全量的数据节点和会话超时时间记录器，将它们序列化后传输给Learner。Learner服务器接收到该全量数据后，会对其反序列化后载入到内存数据库中。

10. 如何优化zk的性能？
通过部署Observer提升读性能。zk有leader、Follower、Observer三种角色，Follower和Observer统称为Learner。leader服务器为客户端提供读和写服务；Follower和Observer都能提供读服务，唯一的区别是Observer机器不参与Leader选举，也不参与“过半写成功”策略，因此Observer可以在不影响写性能的情况下提升集群的读性能。

11. Zk的事务是怎么实现的？
在ZooKeeper中，事务是指能够改变ZooKeePer服务器状态的操作，我们也称之为事务操作或更新操作，一般包括数据节点创建与删除、数据节点内容更新和客户端会话创建与失效等操作。对于每一个事务请求，ZooKoeper都会为其分配一个全局唯一的事务ID,用ZXID来表示，通常是一个64位的数字。每一个ZXID对应一次更新操作，从这些zxId中可以间接地识别出ZooKeeper处理这些更新操作请求的全局顺序。

对于事务请求，zookeeper服务端都会发起事务处理流程。无论对于会话创建请求还是setoata请求，或是其他事务请求，事务处理流程都是一致的，都是由Proposa1RequestProcessor处理器发起，通过Sync、Proposal和Commit三个子流程相互协作完成的。
zk的数据状态存在内存，可是日志存在磁盘，所以在同步的时候，并不是先创建了节点，而是先在各个节点上创建日志。

具体的流程如下（其实就是消息广播的流程）：
在广播事务Proposal之前，Leader服务器会首先为这个事务Proposal分配一个全局单调递增的唯一ID，我们称之为事务ID（即ZXID）,每一个事务Proposal都按照ZXID的先后顺序来进行排序与处理。
具体的，在消息广播过程中，Leader服务器会为每一个Follower服务器都各自分配一个单独的队列，然后将需要广播的事务Proposal依次放入这些队列中去，并且根据FIFO策略进行消息发送。每一个Follower服务器在接收到这个事务Proposal之后，都会首先将其以事务日志的形式写入到本地磁盘中去，并且在成功写入后反馈给Leader服务器一个Ack响应。当Leader服务器接收到超过半数Follower的Ack响应后，就会广播一个Commit消息给所有的Follower服务器以通知其进行事务提交，同时Leader自身也会完成对事务的提交，而每一个Followor服务器在接收到Commit消息后，也会完成对事务的提交。

12. zookeeper 是如何保证事务的顺序一致性的？
Ø 只有leader服务器能接受写请求，即使是follower服务器接受到客户端的请求，也会转发到leader服务器进行处理；
Ø 为每个proposal分配一个全局唯一的递增ID，即ZXID，也就是事务Id反映了所有事务操作的先后顺序。zxid 实际上是一个 64 位的数字，高 32 位是 epoch（ 时期; 纪元; 世; 新时代）用来标识 leader 周期，如果有新的 leader 产生出来，epoch会自增，低 32 位用来递增计数。在运行期间集群中机器相互通信的过程中，都会带上这个epoch以确保彼此在同一个leader周期内。当新产生 proposal 的时候，会依据数据库的两阶段过程，首先会向其他的 server 发出事务执行请求，如果超过半数的机器都能执行并且能够成功，那么就会开始执行；

13. 使用zk实现分布式锁有哪些弊端？
Ø 高并发情况下，性能没那么高。因为每次在创建锁和释放锁的过程中，都要动态创建、销毁瞬时节点来实现锁功能。ZK中创建和删除节点只能通过Leader服务器来执行，然后将数据同步到所有的Follower机器上。zookeeper比较适合以读操作为主的场景。

14. Zookeeper的节点有哪几种类型？
Zookeeper的数据存储结构就像一棵树，这棵树由节点组成，这种节点叫做Znode。Znode分为四种类型：
1.持久节点 （PERSISTENT）
默认的节点类型。该数据节点被创建后，会一直存在于zookeeper服务器上，直到有删除操作来主动清楚这个节点；

2.持久节点顺序节点（PERSISTENT_SEQUENTIAL）
所谓顺序节点，就是在创建节点时，Zookeeper会自动在节点名后面追加一个整形数字，这个整型数字是一个由父节点维护的自增数字； 

3.临时节点（EPHEMERAL）
临时节点的生命周期和客户端的会话绑定在一起。和持久节点相反，当创建节点的客户端与zookeeper断开连接后，临时节点会被删除；zookeeper规定了不能基于临时节点来创建子节点，即临时节点只能作为叶子节点；

4.临时顺序节点（EPHEMERAL_SEQUENTIAL）
顾名思义，临时顺序节点结合和临时节点和顺序节点的特点：在创建节点时，Zookeeper根据创建的时间顺序给该节点名称进行编号；当创建节点的客户端与zookeeper断开连接后，临时节点会被删除。

15. Zookeeper为什么建议是奇数台部署？
Ø Zookeeper官方建议部署奇数台服务器，其实是基于节约资源的角度来考虑的。Zookeeper默认采用Quorums组件来处理集群的脑裂问题。Quorums的原则就是过半存活即可用。Quorums是WARO(Write ALL Read One,当client请求向某副本写数据时，只有当所有副本都更新成功之后，这次写操作才算成功，否则视为失败)副本控制协议的折衷。奇数部署有下面两个优点：
v 发生网络分区的时候（两个）保证有一个分区一定是有大多数机器的，保证zookeeper集群可以继续对外提供服务；
v 节约资源。基于“过半”设计原则，只要ZooKeeper集群中超过半数的机器还能够正常工作，整个集群就能够对外提供服务。基于这个特性，如果想搭建一个能够允许 N 台机器 down 掉的集群，那么就要部署一个由 2*N+1 台服务器构成的 ZooKeeper 集群。因此，一个由 3 台机器构成的 ZooKeeper 集群，能够在挂掉 1 台机器后依然正常工作，而对于一个由 5 台服务器构成的 ZooKeeper 集群，能够对 2 台机器挂掉的情况进行容灾。注意，如果是一个由6台服务器构成的 ZooKeeper 集群，同样只能够挂掉 2 台机器，因为如果挂掉 3 台，剩下的机器就无法实现过半了。因此，从上面的讲解中，我们其实可以看出，对于一个由 6 台机器构成的 ZooKeeper 集群来说，和一个由 5 台机器构成的 ZooKeeper 集群，其在容灾能力上并没有任何显著的优势，反而多占用了一个服务器资源。基于这个原因，ZooKeeper 集群通常设计部署成奇数台服务器即可。

16. 如何使用zookeeper实现一个服务发现？
服务注册时在某个跟路径下(如/clusterService)创建临时节点,节点信息保存服务信息（如url:port,对外发布的接口列表的），同时在该节点上注册一个Watcher监听，这样的话就可以实时监测服务列表的变化情况，如果有子节点删除或者创建都可以被客户端感知(getData)。注意zookeeper的watcher只触发一次，当节点状态改变一次之后，节点状态的第二次改变就不能监听到了。为了能够持续监听，业务逻辑处理完后需要重新设置监听（如将整个处理流程提取一个方法，然后监听事件完成后回调改方法）。
https://blog.csdn.net/lamfang/article/details/108988373

17. zk节点宕机如何处理？
Zookeeper 本身也是集群，推荐配置不少于 3 个服务器。Zookeeper 自身也要保证当一个节点宕机时，其他节点会继续提供服务。Leader负责与ZK集群中所有机器进行通信，例如通过一些心跳检测机制，来检测机器的存活状态。
如果是一个 Follower 宕机，还有 2 台服务器提供访问，因为 Zookeeper 上的数据是有多个副本的，数据并不会丢失；
如果是一个 Leader 宕机，Zookeeper 会选举出新的 Leader；
ZK 集群的机制是只要超过半数的节点正常，集群就能正常提供服务。只有在 ZK节点挂得太多，只剩一半或不到一半节点能工作，集群才失效。

18. 分布式集群中为什么会有 Master主节点？
在分布式环境中，有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能，于是就需要进行 leader 选举。

19. chubby 是什么，和 zookeeper 比你怎么看？
chubby 是 google 的，完全实现 paxos 算法，不开源。zookeeper 是 chubby的开源实现，使用 zab 协议，paxos 算法的变种。

20. zookeeper leader选举的流程？
前一个端口是leader和follower之间通信的端口，后者是leader选举的端口

21. Zookeeper 下 Server 工作状态？
在ZAB协议的设计中，每一个进程都有可能处于以下四种状态之一。
• L00KING:   Leader选举阶段; 寻 找 Leader 状态。当服务器处于该状态时，它会认为当前集群中没有 Leader，因此需要进入 Leader 选举状态。
• FOLLOWING:   Follower服务器和Leader保持同步状态;
• LEADING:   Leader服务器作为主进程领导状态;
• OBSERVING：观察者状态。表明当前服务器角色是 Observer。

组成ZAB协议的所有进程启动的时候，其初始化状态都是LOOKING状态，此时进程组中不存在Leader。所有处于这种状态的进程，都会试图去选举出一个新的Leader。随后如果进程发现已经选举出新的Leader了，那么它就会马上切换到FOLLOWlNG状态，并开始和Leader保持同步。假如5台机器集群，1,2,3依次启动，3称为了leader，4起来后是looking状态，投给自己，但是1,2,3都投给了3,已经有leader了，4就变为follower。这里，我们将处于FOLLOWING状态的进程称为Follower,将处于LEADING状态的进程称为Leader。
考虑到Leader进程随时会挂掉，当检测出Leader已经崩溃或者是放弃了领导地位时，其余的Follower进程就会转换到LOOKING状态，并开始进行新一轮的Leader选举。因此在ZAB协议运行过程中，每个进程都会在LEADlNG、FOLLOWING和LOOKING状态之间不断地转换。

需要注意的是，只有在完成了阶段二，即完成各进程之间的数据同步之后，准Leader进程才能真正成为新的主进程周期中的Leader。完成Leader选举以及数据同步之后，ZAB协议就进入了原子广播阶段。在这一阶段中，Leader会以队列的形式为每一个与自己保持同步的Follower创建一个操作队列。同一时刻，一个Follower只能和一个Leader保持同步，Leader进程与所有的Follower进程之间都通过心跳检测机制来感知彼此的情况。如果Leader能够在超时时间内正常收到心跳检测，那么Follower就会一直与该Leader保持连接。而如果在指定的超时时间内Leader无法从过半的FolIower进程那里接收到心跳检测，或者是TCP连接本身断开了，那么Leader就会终止对当前周期的领导，并转换到LOOKING状态，所有的Follower也会选择放弃这个Leader，同时转换到LOOKING状态。之后，所有进程就会开始新一轮的Leader选举，并在选举产生新的Leader之后开始新一轮的主进程周期。
